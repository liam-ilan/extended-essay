// DATA array stores output
// each element in DATA is an array of form [T, D1, D2, V1, V2]
// T, D1, D2, V1, V2, M1, M2, and W2 are their initial values

// record initial observations
DATAINDEX = 0
DATA[DATAINDEX][0] = T
DATA[DATAINDEX][1] = D1
DATA[DATAINDEX][2] = D2
DATA[DATAINDEX][3] = V1
DATA[DATAINDEX][4] = V2
DATAINDEX = DATAINDEX + 1

// find the time to next block-on-block collision
TC = (D2 + W2 - D1) / (V1 - V2)

// if current simulated collision is Block-on-Block, set to true
ISBLOCKONBLOCK = true

loop until 0 <= V2 <= V1

  // update T
  T = T + TC

  // update displacements
  D1 = D1 + V1 * TC
  D2 = D2 + V2 * TC

  // update V1 and V2 appropriately
  if ISBLOCKONBLOCK
    V1 = ((M1 - M2) * V1 + 2 * M2 * V2) / (M2 + M1)
    V2 = ((M2 - M1) * v2 + 2 * M1 * V1) / (M1 + M2)
  else
    V2 = -1 * V2
  end if

  // push into DATA
  DATA[DATAINDEX][0] = T
  DATA[DATAINDEX][1] = D1
  DATA[DATAINDEX][2] = D2
  DATA[DATAINDEX][3] = V1
  DATA[DATAINDEX][4] = V2
  DATAINDEX = DATAINDEX + 1

  // calculate TC
  if ISBLOCKONBLOCK then
    TC = -D2 / V2
  else
    TC = (D2 + W2 - D1) / (V1 - V2)
  end if

  // record next type of collision
  ISBLOCKONBLOCK = NOT ISBLOCKONBLOCK
end loop

output DATA